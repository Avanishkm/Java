package StacksPractice;

import java.util.Stack;

import Adapter.StackUsingLL.StackUsingLL;

public class client {

	static StackUsingLL st = new StackUsingLL();
	 
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		
		Twostacks ts = new Twostacks(5);
//        ts.push1(5);
//        ts.push2(10);
//        ts.push2(15);
//        ts.push1(11);
//        ts.push2(7);
//        System.out.println("Popped element from" +
//                           " stack1 is " + ts.pop1());
//        ts.push2(40);
//        System.out.println("Popped element from" +
//                         " stack2 is " + ts.pop2());
//    
//        System.out.println(ts.balanceParanthesis("a+b*(c^d-e)^(f+g*h)-i"));
//    
//		StackUsingLL stack = new StackUsingLL();
////		Stack<Integer> stack = new Stack<>();
//		stack.push(10);
//		stack.push(20);
//		stack.push(30);
//		stack.push(40);
//		stack.push(50);
//		stack.display();
////		System.out.println(stack.top());
//        displayReverse(stack);
//        System.out.println("------------------");
//        stack.display();
//        System.out.println("------------------");
//        
//        StackUsingLL helper = new StackUsingLL();
//        Reverse(stack, helper);
//        stack.display();
////        helper.display();
		
		
		st.push(10);
		st.push(20);
		st.push(30);
		st.push(40);
		st.push(50);
		st.display();
		Reverse(st, new StackUsingLL());
		st.display();
		

	}
	
	// display reverse 
	
	public static void displayReverse(StackUsingLL st) throws Exception{
		
		if (st.isEmpty()) {
			return ;
		}
		
		int item = st.pop();
		
		displayReverse(st);
		
		System.out.println(item );
		
		st.push(item);
		
		
	}
	
	// reverse the stack 
	
	public static void Reverse(StackUsingLL stack , StackUsingLL helper) throws Exception {
		
		if (stack.isEmpty()) {
			
			if (helper.isEmpty()) {
				return;
				
			}
			int item = helper.pop();
			
			Reverse(stack, helper);
			stack.push(item);
			
			return ;
		}
		
		int item = stack.pop();
		helper.push(item);
		Reverse(stack, helper);
		
		
	}
	
	static void insert_at_bottom(char x){
		 
        if(st.isEmpty())
            st.push(x);
 
        else{
            /* All items are held in Function Call Stack until we
               reach end of the stack. When the stack becomes
               empty, the st.size() becomes 0, the
               above if part is executed and the item is inserted
               at the bottom */
                
            char a = st.peek();
            st.pop();
            insert_at_bottom(x);
 
            //push allthe items held in Function Call Stack
            //once the item is inserted at the bottom
            st.push(a);
        }
    }
     
    // Below is the function that reverses the given stack using
    // insert_at_bottom()
    static void  reverse()
    {
        if(st.size()>0)
        {
            /* Hold all items in Function Call Stack until we
               reach end of the stack */
            char x = st.peek();
            st.pop();
            reverse();
            /* Insert all the items held in Function Call Stack
               one by one from the bottom to top. Every item is
               inserted at the bottom */
            insert_at_bottom(x);
        }
    }

}
