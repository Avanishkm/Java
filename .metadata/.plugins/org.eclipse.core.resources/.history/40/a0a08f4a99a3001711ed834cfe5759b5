package ExtraClassesForDs.BinaryTreeExtraClass;

import java.util.LinkedList;
import java.util.Scanner;

class BinaryTree {

	private class Node {
		Node left;
		Node right;
		int data;

	}

	int size;
	Node root;

	public BinaryTree() {

		Scanner scn = new Scanner(System.in);
		root = takeInput(this.root, false, scn);
	}

	public BinaryTree(int[] pre, int[] in) {
		root = construct2(pre, in, 0, pre.length - 1, 0, in.length - 1);
	}

	public Node construct(int[] pre, int[] in, int psi, int pei, int isi, int iei) {

		if (psi > pei || isi > iei) {
			return null;
		}

		Node node = new Node();
		node.data = pre[psi];
		this.size++;

		int idx = -1;
		for (int i = isi; i <= iei; i++) {
			if (in[i] == node.data) {
				idx = i;
				break;
			}
		}

		int clse = idx - isi;
		node.left = construct(pre, in, psi + 1, psi + clse, isi, idx - 1);
		node.right = construct(pre, in, psi + clse + 1, pei, idx + 1, iei);
		return node;

	}

	public Node construct2(int[] pos, int[] in, int psi, int pei, int isi, int iei) {

		if (psi > pei || isi > iei) {
			return null;
		}
		Node node = new Node();
		node.data = pos[pei];
		this.size++;

		int idx = -1;

		for (int i = isi; i <= iei; i++) {
			if (in[i] == node.data) {
				idx = i;
				break;
			}
		}
		int clse = idx - isi;
		node.left = construct2(pos, in, psi, psi + clse - 1, isi, idx - 1);
		node.right = construct2(pos, in, psi + clse, pei - 1, idx + 1, iei);

		return node;

	}

	public Node construct3(int[] pos, int[] pre, int psi, int pei, int presi, int preei) {

		if (psi > pei || presi > preei) {
			return null;
		}
		Node node = new Node();
		node.data = pre[psi];
		this.size++;

		int idx = -1;
		return node;

	}

	public BinaryTree(int[] arr) {
		root = construct(arr, 0, arr.length - 1);
	}

	private Node construct(int[] arr, int lo, int hi) {
		if (lo > hi) {
			return null;
		}

		int mid = (lo + hi) / 2;

		Node node = new Node();
		this.size++;
		node.data = arr[mid];

		node.left = construct(arr, lo, mid - 1);
		node.right = construct(arr, mid + 1, hi);

		return node;

	}

	private Node takeInput(Node parent, boolean ilc, Scanner scn) {

		if (parent == null) {
			System.out.println("root?");

		} else {
			if (ilc) {
				System.out.println("Data for left child");
			} else {
				System.out.println("Data for right child");
			}
		}

		int dat = scn.nextInt();
		Node child = new Node();
		this.size++;
		child.data = dat;

		// for left
		System.out.println("Does" + parent + " have a left child ?");
		boolean a = scn.nextBoolean();
		if (a) {
			child.left = takeInput(child, true, scn);
		}

		// for right
		System.out.println("Does" + parent + " have a right child ?");
		boolean b = scn.nextBoolean();
		if (b) {
			child.right = takeInput(child, false, scn);
		}

		return child;

	}

	public int size() {
		return this.size;
	}

	public boolean isEmpty() {
		return this.size == 0;
	}

	public void display() {
		display(this.root);
	}

	private void display(Node node) {
		if (node == null) {
			return;
		}

		String str = "";

		if (node.left != null) {
			str += node.left.data;
		} else {
			str += ".";
		}
		str += "=>" + node.data + "<=";
		if (node.right != null) {
			str += node.right.data;
		} else {
			str += ".";
		}
		System.out.println(str);

		display(node.left);
		display(node.right);
	}

	private int size2(Node node) {
		if (node == null) {
			return 0;
		}

		int ls = size2(node.right);
		int rs = size2(node.left);

		return ls + rs + 1;
	}

	public int size2() {
		return size2(this.root);
	}

	public int height() {
		return height(this.root);
	}

	private int height(Node node) {
		if (node == null) {
			return -1;
		}

		int l = height(node.left);
		int r = height(node.right);

		return Math.max(l, r) + 1;
	}

	public int max() {
		return max(this.root);
	}

	private int max(Node node) {
		if (node == null) {
			return Integer.MIN_VALUE;
		}

		int l = max(node.left);
		int r = max(node.right);

		return Math.max(l, Math.max(r, node.data));
	}

	public boolean find(int data) {
		return find(this.root, data);
	}

	private boolean find(Node node, int data) {
		if (node == null) {
			return false;
		}

		if (node.data == data) {
			return true;
		}

		boolean rv = find(node.left, data);
		if (rv) {
			return rv;
		} else {
			rv = find(node.right, data);
		}

		return rv;

	}

	public void removeNode() {
		removenode(null, this.root);
	}

	private void removenode(Node parent, Node node) {

		if (node == null) {
			return;
		}

		if (node.left == null && node.right == null) {
			parent.left = null;
			parent.right = null;
			return;
		}

		removenode(node, node.left);
		removenode(node, node.right);

	}

	public int diameter() {
		return diameter(this.root);
	}

	private int diameter(Node node) {
		if (node == null) {
			return 0;
		}
		int l = diameter(node.left);
		int r = diameter(node.right);
		int max = Math.max(l, r);

		int l1 = height(node.left);
		int l2 = height(node.right);
		int sum = l1 + l2 + 2;

		return Math.max(max, sum);

	}

	private class diaPair {
		int height;
		int diameter;
	}

	public int diameter2() {
		return diameter2(this.root).diameter;
	}

	private diaPair diameter2(Node node) {
		if (node == null) {
			diaPair bp = new diaPair();
			bp.height = -1;
			bp.diameter = 0;
			return bp;
		}

		diaPair lp = diameter2(node.left);
		diaPair rp = diameter2(node.right);

		diaPair mp = new diaPair();

		mp.height = Math.max(lp.height, rp.height) + 1;
		mp.diameter = Math.max(lp.height + rp.height + 2, Math.max(lp.diameter, rp.diameter));

		return mp;
	}

	private class balPair {
		boolean isBal;
		int height;
	}

	public boolean IsBalanced() {
		return IsBalanced(this.root).isBal;
	}

	private balPair IsBalanced(Node node) {
		if (node == null) {
			balPair bp = new balPair();
			bp.isBal = true;
			bp.height = -1;
			return bp;
		}

		balPair lp = IsBalanced(node.left);
		balPair rp = IsBalanced(node.right);

		balPair mp = new balPair();
		mp.height = Math.max(lp.height, rp.height) + 1;

		if (lp.isBal && rp.isBal) {
			int gap = Math.abs(lp.height - rp.height);
			if (gap <= 1) {
				mp.isBal = true;

			} else {
				mp.isBal = false;
			}
		} else {
			mp.isBal = false;
		}

		return mp;
	}

	private class bstPair {
		boolean isBst;
		int min;
		int max;
		int size;

		// for largest bst in a tree

		Node largestBST;
		int largestBSTSize;

	}

	public boolean IsBst() {
		bstPair p = new bstPair();
		System.out.println(p.largestBSTSize);
		return IsBst(this.root).isBst;
	}

	private bstPair IsBst(Node node) {
		if (node == null) {
			bstPair bp = new bstPair();
			bp.min = Integer.MAX_VALUE;
			bp.max = Integer.MIN_VALUE;
			bp.isBst = true;
			bp.largestBSTSize = -1;
			return bp;
		}

		bstPair lp = IsBst(node.left);
		bstPair rp = IsBst(node.right);

		bstPair mp = new bstPair();
		// mp.max =Math.max(lp.max, Math.max(node.data, rp.max)); // sir new kraya
		// mp.min = Math.min(node.data , Math.min(lp.min, rp.min));

		mp.max = Math.max(node.data, lp.max);
		mp.min = Math.min(node.data, rp.min);
		if (lp.isBst && rp.isBst) {
			if (node.data > lp.max && node.data < rp.min) {
				mp.isBst = true;

			} else {
				mp.isBst = false;
			}
		} else {
			mp.isBst = false;
		}

		if (mp.isBst) {
			mp.largestBST = node;
			mp.largestBSTSize = mp.largestBSTSize;
		} else {
			if (lp.largestBSTSize > rp.largestBSTSize) {
				mp.largestBST = lp.largestBST;
				mp.largestBSTSize = lp.largestBSTSize;
			} else {
				mp.largestBST = rp.largestBST;
				mp.largestBSTSize = rp.largestBSTSize;
			}
		}

		return mp;

	}

	public void preOrder() {
		preOrder(this.root);
	}

	private void preOrder(Node node) {
		if (node == null) {
			return;
		}

		System.out.println(node.data);
		preOrder(node.left);
		preOrder(node.right);

	}

	public void postOrder() {
		postOrder(this.root);
	}

	private void postOrder(Node node) {
		if (node == null) {
			return;
		}

		postOrder(node.left);
		postOrder(node.right);
		System.out.println(node.data);

	}

	public void inOrder() {
		inOrder(this.root);
	}

	private void inOrder(Node node) {
		if (node == null) {
			return;
		}

		inOrder(node.left);
		System.out.println(node.data);
		inOrder(node.right);

	}

	public void preOrderI() {

		LinkedList<TraversalPair> stack = new LinkedList<>();

		TraversalPair rp = new TraversalPair();
		rp.node = root;

		stack.add(rp);

		while (!stack.isEmpty()) {

			TraversalPair get = stack.getFirst();

			if (get.self == false) {
				get.self = true;
				if (get.node != null) {
					System.out.println(get.node.data);
				}
			} else if (get.left == false) {

				// condition for null pointer
				if (get.node.left != null) {
					TraversalPair np = new TraversalPair();
					np.node = get.node.left;
					stack.addFirst(np);
				}
				get.left = true;

			} else if (get.right == false) {

				// condition for handling null pointer
				if (get.node.right != null) {
					TraversalPair np = new TraversalPair();
					np.node = get.node.right;
					stack.addFirst(np);
				}
				get.right = true;

			} else {
				stack.removeFirst();
			}

		}

	}

	private class TraversalPair {
		boolean self;
		boolean left;
		boolean right;
		Node node;
	}

	public void levelOrder() {

		LinkedList<Node> queue = new LinkedList<>();
		queue.addLast(this.root);
		while (!queue.isEmpty()) {

			Node r = queue.getFirst();
			if (r != null) {
				System.out.println(r.data);
			}
			queue.removeFirst();
			if (r != null) {

				queue.addLast(r.left);
				queue.addLast(r.right);
			}

		}

	}

	public void printWithNoSibling() {
		System.out.println(this.root.data);
		printWithNoSibling(null, this.root);
	}

	private void printWithNoSibling(Node parent, Node node) {
		if (node == null) {
			return;
		}

		if ((node.left != null && node.right == null) || (node.right != null && node.left == null)) {

			if ((node.left != null && node.right == null)) {
				printWithNoSibling(node, node.left);
				System.out.println(node.left.data);
			} else if ((node.right != null && node.left == null)) {
				printWithNoSibling(node, node.right);
				System.out.println(node.right.data);
			}
		} else {
			printWithNoSibling(node, node.left);
			printWithNoSibling(node, node.right);
		}

	}

	public Node largestBst() {

		bstPair bst = new bstPair();
		bst = IsBst(this.root);
		return bst.largestBST;

	}

	// private bstPair largestBst(Node node) {
	//
	//
	//
	//
	// }

	// level by level printing iterative

	// error prone code please check
	public void zicZacRecursive() {
		int height = height(this.root);

		boolean ilc = false;
		for (int i = 1; i <= height+1; i++) {
			zicZacRecursive(this.root, i, ilc);

			if (ilc) {
				ilc = false;

			} else {
				ilc = true;
			}
		}
	}

	private void zicZacRecursive(Node node, int level, boolean ilc) {
		if (node == null) {
			return;
		} else if (level == 1) {
			System.out.print(node.data + " ");
		}

		else if (level > 1) {
			if (ilc) {

				zicZacRecursive(node.left, level - 1, ilc);
				zicZacRecursive(node.right, level - 1, ilc);
			} else {
				zicZacRecursive(node.right, level - 1, ilc);
				zicZacRecursive(node.left, level - 1, ilc);
			}

		}
	}

	public void ziczacI() {
		ziczacI(this.root);
	}

	private void ziczacI(Node node) {
		if (node == null) {
			return;
		}
		LinkedList<Node> queue = new LinkedList<>();
		LinkedList<Node> stack = new LinkedList<>();

		queue.addLast(this.root);
		int count = 0;
		while (queue.size()!=0) {
			Node rm = queue.removeFirst();
			System.out.print(rm.data + " ");

			if (count % 2 == 0) {
				if (rm.right != null) {
					stack.addFirst(rm.right);
				}
				if (rm.left != null) {
					stack.addFirst(rm.left);
				}
				if (node.left == null && node.right == null) {
					return;
				}

			} else {
				if (rm.left != null) {
					stack.addFirst(rm.left);
				}
				if (rm.right != null) {
					stack.addFirst(rm.right);
				}
				if (node.left == null && node.right == null) {
					return;
				}
			}

			if (queue.size() == 0) {
				count++;
				queue = stack;
				stack = new LinkedList<>();

				// System.out.print(" ");
			}

		}
	}
	
	
	
	
	
	
}
