package SegmentedTree;

import java.util.Arrays;

public class practice {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {2,2,1,1,1,2,2};
		System.out.println(majorityElement(nums));
		
	}
	  public static int majorityElement(int[] nums) {
	        int k = 1;
	        if(k==1){
	            k=1;
	        }else {
	            k=k-1;
	        }
	        int[] element = new int[k];
	        int[] count = new int[k];
	        
	        Arrays.fill(element,Integer.MAX_VALUE);
	        element[0] = nums[0];
	        count[0] = 1;
	        
	        for(int i=1;i<nums.length;i++){
	            for(int e=0 ;e <element.length ;e++){
	                if(element[e] == nums[i]){
	                    count[e]++;
	                }
	                else if(element[e] == Integer.MAX_VALUE ){
	                    element[e] = nums[i];
	                    count[e] = 1;
	                }else if(count[e]==0){
	                    element[e] = nums[i];
	                    count[e] = 1;
	                }
	                else if(e==element.length-1){
	                    for(int a=0 ;a <element.length ;a++){
	                        count[a]--;
	                    }
	                }
	            }
	        }
	        
	        int elementans = Integer.MAX_VALUE;
	        for(int e=0 ;e <element.length ;e++){
	            int elm = element[e];
	            int count1 = 0;
	            for(int i=0 ;i<nums.length;i++){
	                if(nums[i] ==elm){
	                    count1++;
	                }
	            }
	            if(count1>nums.length/k)
	                elementans = elm;
	            
	        }
	        
	       return (elementans==Integer.MAX_VALUE)?-1:elementans;
	    }

}
