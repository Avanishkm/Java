package Queue;

import java.util.Arrays;
import java.util.Locale.LanguageRange;

//import Stacks.DynamicStack;

public class Client {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		Queue r = new Queue(5);
		// Queue r = new DynamicQueue(5);

		r.enqueue(10);
		r.enqueue(20);
		r.enqueue(30);
		r.enqueue(40);
		// r.enqueue(50);
		// System.out.println(r.rear()+ " rear");
		System.out.println(r.size() + " size");
		System.out.println(r.data.length + " data.length");
		// r.enqueue(50);
		// r.enqueue(60);
		// r.enqueue(70);
		r.display();
		r.dequeue();
		r.dequeue();
		r.dequeue();
		r.enqueue(60);
		r.enqueue(70);
		// System.out.println(r.rear()+ " rear");
		r.display();

		// System.out.println(r.front());
		// r.dequeue();
		// r.display();
		// r.dequeue();
		// r.dequeue();
		// r.display();
		//
		// r.enqueue(60);
		// r.display();
		// System.out.println(r.isempty());
		// r.isempty();
		// r.dequeue();
		// r.dequeue();
		// r.dequeue();
		// r.dequeue();
		// r.dequeue();
		// r.display();
		// System.out.println(r.isempty());

		// displayReverse(r , 0);
		// r.display();

		// reverse(r);
		// r.display();
		//
		int[] arr = {8,1,7,7,0};
		largeultof3(arr);
	}

	public static void displayReverse(Queue r, int count) throws Exception {

		if (count == r.size) {
			return;
		}

		int item = r.dequeue();
		r.enqueue(item);

		displayReverse(r, count + 1);

		System.out.println(item + "    ");

	}

	public static void reverse(Queue r) throws Exception {
		if (r.isempty()) {
			return;
		}

		int item = r.dequeue();
		reverse(r);
		r.enqueue(item);

	}

	public static void largeultof3(int[] arr) throws Exception {
		int[] aux = new int[50] ;
		Queue queue0 = new Queue(10);
		Queue queue1 = new Queue(10);
		Queue queue2 = new Queue(10);
		int sum, i;
		for (i = 0, sum = 0; i < arr.length; i++) {
			sum += arr[i];
			if (arr[i] % 3 == 0) {
				queue0.enqueue(arr[i]);
			} else if (arr[i] % 3 == 1) {
				queue1.enqueue(arr[i]);
			} else if (arr[i] % 3 == 2) {
				queue2.enqueue(arr[i]);
			}
		}

		if (sum % 3 == 1) {
			if (!queue1.isempty()) {
				queue1.dequeue();
			} else {
				if (!queue2.isempty()) {
					queue2.dequeue();
				} else {
					return ;
				}
				if (!queue2.isempty()) {
					queue2.dequeue();
				} else {
					return ;
				}
			}
		} else if (sum % 3 == 2) {
			if (!queue2.isempty()) {
				queue2.dequeue();
			} else {
				if (!queue1.isempty()) {
					queue1.dequeue();
				} else {
					return ;
				}
				if (!queue1.isempty()) {
					queue1.dequeue();
				} else {
					return ;
				}
			}
		} 
		int idx =0;
		int[] farray =popaux(aux, queue0, queue1, queue2, idx);
		
		Arrays.sort(farray);
		for(int j=0 ;j<farray.length;j++) {
			System.out.println(farray[j]);
		}
		
		
	}

	private int[] popaux (int[] aux ,Queue queue0 ,Queue queue1 ,Queue queue2 , int idx ) throws Exception {
		while(!queue0.isempty()) {
			aux[idx]=queue0.dequeue();
			idx++;
		}
		while(!queue1.isempty()) {
			aux[idx]=queue1.dequeue();
			idx++;
		}
		while(!queue2.isempty()) {
			aux[idx]=queue2.dequeue();
			idx++;
		}
		return aux;
	}

	
}
