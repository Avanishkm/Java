package July5;

import java.util.Scanner;

public class BinaryTree {

	private class Node {
		int data;
		Node left;
		Node right;
	}

	private Node root;
	private int size;

	public BinaryTree() {
		this.root = this.takeInput(new Scanner(System.in), null, false);
	}

	public Node takeInput(Scanner scn, Node parent, boolean ilc) {

		// prompt

		if (parent == null) {
			System.out.println("Root Node ? ");
		} else if (ilc) {
			System.out.println("Enter the left child for " + parent.data);
		} else {

			System.out.println("Enter the right child for " + parent.data);

		}

		// collect data and create node

		int cdata = scn.nextInt();
		Node child = new Node();
		child.data = cdata;
		this.size++;

		// left
		System.out.println("Do you have Left child for " + child.data);
		boolean hlc = scn.nextBoolean();
		// takeInput(scn, child, true);

		if (hlc) {
			child.left = takeInput(scn, child, true);

		}
		// else {
		//
		// System.out.println(".");
		// }

		// right

		System.out.println("Do you have right child for " + child.data);
		boolean hrc = scn.nextBoolean();
		// takeInpur(scn, child, false);

		if (hrc) {
			child.right = takeInput(scn, child, false);
		}
		// else {
		//
		// System.out.println(".");
		// }

		// return

		return child;

	}

	public void display() {

		display(this.root);
	}

	private void display(Node node) {

		String str = "";

		if (node == null) {
			return;
		}

		if (node.left != null) {
			str += node.left.data;
			// System.out.println(node.left.data + "===>");
		} else {

			str += ".";
			// System.out.println(str + "===>");
		}

		// System.out.println( " " + node.data + " ");
		str += " => " + node.data + " <= ";

		if (node.right != null) {
			str += node.right.data;
			// System.out.println(node.right.data);
		} else {

			str += ".";
		}

		System.out.println(str);
		this.display(node.left);
		this.display(node.right);

	}

	public int size() {
		return this.size;
	}

	public boolean Isempty() {
		return this.size() == 0;

	}

	public int size2() {

		return this.size2(this.root);
	}

	private int size2(Node node) {
		if (node == null) {

			return 0;
		}

		int ls = this.size2(node.left);
		int rs = this.size2(node.right);

		return ls + rs + 1;
	}

	public int max() {
		return max(this.root);
	}

	private int max(Node node) {
		if (node == null) {
			return Integer.MIN_VALUE;
		}

		// if(node.left == null ||node.right == null ) {
		// return node.data;
		// }
		int l = max(node.left);
		int r = max(node.right);

		int k = Math.max(l, Math.max(r, node.data));

		return k;

	}

	public int height() {
		return height(this.root);
	}

	private int height(Node node) {

		if (node == null) {
			return -1;
		}

		int lh = height(node.left);
		int rh = height(node.right);

		return Math.max(lh, rh) + 1;
	}

	public int min() {
		return min(this.root);
	}

	private int min(Node node) {

		if (node == null) {

			return Integer.MAX_VALUE;
		}

		// if (root.left == null || root.right == null) {
		//
		// return root.data;
		// }

		int l = min(node.left);
		int r = min(node.right);

		return Math.min(Math.min(l, r), root.data);

	}

	public boolean find(int data) {
		return find(this.root, data);
	}

	private boolean find(Node node, int data) {

		if (node == null)
			return false;

		if (node.data == data) {
			return true;
		}

		boolean left = find(node.left, data);
		boolean right = find(node.right, data);

		return left || right;

	}

	public int diameter() {
		
		return diameter(this.root);
				
	}
	
	private int diameter (Node node) {
		if (node ==null) {
			return 0;
		}
		
		
		int l = this.height(node.left);
		int r = this.height(node.right);
		int sum = 2 + l +r ; 
	
		int a= this.diameter(node.left);
		int b = this.diameter(node.right);
		int max2 = Math.max(a, b);
		return Math.max(sum, max2);
	}
	
	public int diameter2() {
		return this.diameter2(this.root).diameter;
	}
	private DiaPair diameter2(Node node) {
		if (node ==null) {
			DiaPair rv = new DiaPair();
			
			rv.height =-1;
			rv.diameter=0;
			return rv; 
		}
		
		
		DiaPair l  = this.diameter2(node.left);
		DiaPair r = this.diameter2(node.right);
		
	
		DiaPair dp = new DiaPair();
		
		dp.height = Math.max(l.height, r.height) + 1 ;
		dp.diameter = Math.max(l.height + r.height + 2, Math.max(l.diameter, r.diameter));
		
		return dp ;
		
	}
	
	private class DiaPair{
		int diameter ;
		int height ;
		
	}
	
	public boolean Isbalanced() {
		return Isbalanced(this.root).bal ;
	}
	
	private balancetrio Isbalanced(Node node) {
		if(node == null) {
			
			balancetrio rv = new balancetrio();
			rv.height = -1 ;
			rv.bal = true ;
			return rv; 
		}
		
		
		balancetrio lp = this.Isbalanced(node.left);
		balancetrio rp = this.Isbalanced(node.right);
		
		
		balancetrio bt = new balancetrio();
		bt.height = Math.max(lp.height, rp.height) + 1 ;
		if (lp.bal && rp.bal && Math.abs(lp.height - rp.height)<=1 ) {
			
			bt.bal=true;
		}else {
			
			bt.bal=false ;
		}
		
		return bt;
		
	}
	private class balancetrio {

		int height ; 
		boolean bal ;
		
	}

	public boolean IsBst() {
		return IsBst(this.root).balanced;
	}
	
	private BstPair IsBst(Node node) {
		if(node ==null) {
			BstPair rv = new BstPair();
			rv.balanced = true ;
			rv.max = Integer.MIN_VALUE;
			rv.min = Integer.MAX_VALUE;
			
		}
		
		
		BstPair l = IsBst(node.left);
		BstPair r = IsBst(node.right);
		
		BstPair bs = new BstPair();
		bs.min = Math.min(l.min, Math.min(r.min, node.data));
		bs.max = Math.max(l.max, Math.max(r.max, node.data));
		
		if (this.root.data > bs.min && this.root.data < bs.max  ) {
			
			bs.balanced = true ; 
		}else {
			bs.balanced =false ;
		}
		
		return bs ;
		
	}
	
	private class BstPair{
		
		int max ;
		int min ; 
		boolean balanced;
		
	}

}
